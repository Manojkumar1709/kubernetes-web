export const data = [
    {cmd:'create', desc:'Create a resource from a file or from stdin'},
    {cmd:'expose', desc:'Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service'},
    {cmd:'run ', desc:'Set specific features on objects'},
    {cmd:'set', desc:'Get documentation for a resource'},
    {cmd:'explain', desc:'All Containers which are running and exicted containers'},
    {cmd:'get', desc:'Display one or many resources'},
    {cmd:'edit ', desc:'Edit a resource on the server'},
    {cmd:' delete', desc:'Delete resources by file names, stdin, resources and names, or by resources and label selector'},
    {cmd:'rollout', desc:'Manage the rollout of a resource'},
    {cmd:'scale', desc:'Set a new size for a deployment, replica set, or replication controller'},
    {cmd:'autoscale ', desc:'Auto-scale a deployment, replica set, stateful set, or replication controller'},
    {cmd:'certificate', desc:' Modify certificate resources'},
    {cmd:'cluster-info', desc:'Display cluster information'},
    {cmd:'top ', desc:'Display resource (CPU/memory) usage'},
    {cmd:'cordon ', desc:'Mark node as unschedulable'},
    {cmd:'uncordon', desc:'Mark node as schedulable'},
    {cmd:'drain', desc:' Drain node in preparation for maintenance'},
    {cmd:'taint ', desc:'Update the taints on one or more nodes'},
    {cmd:'describe', desc:'Show details of a specific resource or group of resources'},
    {cmd:'logs ', desc:'Print the logs for a container in a pod'},
    {cmd:'attach', desc:'Attach to a running container'},
    {cmd:'exec', desc:' Execute a command in a container'},
    {cmd:'port-forward', desc:'Forward one or more local ports to a pod'},
    {cmd:'proxy ', desc:'Run a proxy to the Kubernetes API server'},
    {cmd:'cp ', desc:'Copy files and directories to and from containers'},
    {cmd:'auth', desc:'Inspect authorization'},
    {cmd:'debug', desc:'Create debugging sessions for troubleshooting workloads and nodes'},
    {cmd:'events ', desc:'List events'},
    {cmd:'diff', desc:'Diff the live version against a would-be applied version'},
    {cmd:'apply', desc:'Apply a configuration to a resource by file name or stdin'},
    {cmd:'patch', desc:'Update fields of a resource'},
    {cmd:'replace ', desc:'Replace a resource by file name or stdin'},
    {cmd:'wait', desc:' Experimental: Wait for a specific condition on one or many resources'},
    {cmd:'kustomize', desc:'Build a kustomization target from a directory or URL'},
    {cmd:'label', desc:'Update the labels on a resource'},
    {cmd:'annotate', desc:'Update the annotations on a resource'},
    {cmd:'completion', desc:'Output shell completion code for the specified shell (bash, zsh, fish, or powershell)'},
    {cmd:'api-resources', desc:'Print the supported API resources on the server'},
    {cmd:'api-versions', desc:'Print the supported API versions on the server, in the form of "group/version"'},
    {cmd:'config', desc:'Modify kubeconfig files'},
    {cmd:'plugin', desc:'Provides utilities for interacting with plugins'},
    {cmd:'version', desc:'Print the client and server version information'},
    {cmd:'Usage', desc:'kubectl [flags] [options]'},
    {cmd:"--as='':", desc:'Username to impersonate for the operation. User could be a regular user or a service account in a namespace.'},
    {cmd:" --as-group=[]:", desc:'Group to impersonate for the operation, this flag can be repeated to specify multiple groups.'},
    {cmd:"--as-uid='':", desc:'UID to impersonate for the operation.'},
    {cmd:"--cache-dir='/home/user/.kube/cache':", desc:'Default cache directory'},
    {cmd:" --certificate-authority='':", desc:'Path to a cert file for the certificate authority'},
    {cmd:"--client-certificate='':", desc:'Path to a client certificate file for TLS'},
    {cmd:"--client-key='':", desc:'Path to a client key file for TLS'},
    {cmd:"--cluster='':", desc:'The name of the kubeconfig cluster to use'},
    {cmd:"--context='':", desc:'The name of the kubeconfig context to use'},
    {cmd:'--disable-compression=false:', desc:'If true, opt-out of response compression for all requests to the server'},
    {cmd:'--insecure-skip-tls-verify=false:', desc:"If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure"},
    {cmd:" --kubeconfig='':", desc:'Path to the kubeconfig file to use for CLI requests.'},
    {cmd:'--log-flush-frequency=5s:', desc:'Maximum number of seconds between log flushes'},
    {cmd:'--match-server-version=false:', desc:'Require server version to match client version'},
    {cmd:" -n, --namespace='':", desc:'If present, the namespace scope for this CLI request'},
    {cmd:" --password='':", desc:'Password for basic authentication to the API server'},
    {cmd:"--profile='none':", desc:'Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)'},
    {cmd:"--profile-output='profile.pprof':", desc:'Name of the file to write the profile to'},
    {cmd:"--request-timeout='0':", desc:"The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests."},
    {cmd:"-s, --server='':", desc:'The address and port of the Kubernetes API server'},
    {cmd:"--tls-server-name='':", desc:'Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used'},
    {cmd:"--token='':", desc:'Bearer token for authentication to the API server'},
    {cmd:"--user='':", desc:'The name of the kubeconfig user to use'},
    {cmd:"--username='':", desc:'Username for basic authentication to the API server'},
    {cmd:'-v, --v=0:', desc:'number for the log level verbosity'},
    {cmd:'--vmodule=:', desc:'comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)'},
    {cmd:'--warnings-as-errors=false:', desc:'Treat warnings received from the server as errors and exit with a non-zero exit code'},
]





